var oereoApp = angular.module('oereoApp', [
  'restangular',
  'ngRoute',
  'ngAnimate',
  'ui.bootstrap',
  'directives',
  'filters',
]);

oereoApp.config(function ($routeProvider, RestangularProvider) {

  // ROUTING

  $routeProvider
    .when('/', {
      controller: 'ListController',
      templateUrl: '<%= asset_url("templates/resource_list.html") %>'
    })
    .when('/new', {
      controller: 'CreateController',
      templateUrl: '<%= asset_url("templates/resource_detail.html") %>'
    })
    .when('/edit/:resourceId', {
      controller:EditController,
      templateUrl: '<%= asset_url("templates/resource_detail.html") %>',
      resolve: {
        resource: function (Restangular, $route) {
          return Restangular.one('resources', $route.current.params.resourceId).get();
        }
      }
    })
    .otherwise({redirectTo: '/'});

  // CONFIGURE API

  RestangularProvider.setBaseUrl('/api');
  RestangularProvider.setDefaultHeaders({ 'X-AUTH-TOKEN': 'access_token' }); // FIXME: secure access token

  // Parse the response
  RestangularProvider.addResponseInterceptor(function(data, operation, what, url, response) {
    console.info('Received: ', data);

    if (operation === 'getList') {
      data = data[what];
      data.pagination = formatPaginationHeader(response.headers('Link'));
      console.info('Extracted list: ', data);
    }
    else if (operation === 'get') {
      data = data[what.slice(0, -1)]; // Remove the S
      console.info('Extracted object: ', data);
    }

    return data;
  });

  // TODO: Break this out, maybe a service?
  // Turns a Link header with pagination into an object, parses things like this:
  // <http://localhost:3000/api/resources?page=2>; rel="next", <http://localhost:3000/api/resources?page=3>; rel="last"
  function formatPaginationHeader(header) {
    var links = {},
        matches,
        regex = /<(.+)>; rel="(.+)"/

    if (typeof header !== 'string') {
      return links;
    }

    header.split(', ').forEach(function (link) {
      matches = link.match(regex);
      links[matches[2]] = matches[1];
    });
    return links;
  }

});
